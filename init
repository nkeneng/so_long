#!/usr/bin/env bash
# This script was generated by bashly 1.2.2 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script
# :command.root_command
root_command() {
  # src/root_command.sh
  project_name=${args[project_name]}

  init() {
    update_main
    init_submoules
    create_header_file
    update_makefile
  }

  update_makefile() {
    old_project_name="project"
    new_project_name=$project_name
    sed -i '' "s/^NAME = $old_project_name/NAME = $new_project_name/g" Makefile
  }

  init_submoules() {
  	git submodule add git@github.com:nkeneng/Libft.git libft
  }

  create_header_file(){
      project_name_upper=$(echo "$project_name" | tr '[:lower:]' '[:upper:]')

      echo "#ifndef ${project_name_upper}_H" > "${project_name}.h"
      echo "# define ${project_name_upper}_H" >> "${project_name}.h"
      echo "" >> "${project_name}.h"

      echo '# include "libft/ft_printf/ft_printf.h"' >> "${project_name}.h"
      echo '# include "libft/get_next_line/get_next_line.h"' >> "${project_name}.h"
      echo '# include "libft/lib_ft/libft.h"' >> "${project_name}.h"

      echo "# include <stdio.h>" >> "${project_name}.h"
      echo "# include <stdlib.h>" >> "${project_name}.h"

      echo "" >> "${project_name}.h"
      echo "#endif" >> "${project_name}.h"
  }

  update_main() {
    old_filename="project.h"
    new_filename="$project_name.h" # Replace this with your new filename
    sed -i '' "s/#include \"$old_filename\"/#include \"$new_filename\"/g" main.c
  }

  inspect_args
  init

}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
init_usage() {
  printf "init - 42 Project generator\n\n"

  printf "%s\n" "Usage:"
  printf "  init PROJECT_NAME [OPTIONS]\n"
  printf "  init --help | -h\n"
  printf "  init --version | -v\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--force, -f"
    printf "    Overwrite existing files\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "PROJECT_NAME"
    printf "    Project name in snake case\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  init push_swap\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="root"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --force | -f)

        # :flag.case_no_arg
        args['--force']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['project_name']+x} ]]; then
          args['project_name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['project_name']+x} ]]; then
    printf "missing required argument: PROJECT_NAME\nusage: init PROJECT_NAME [OPTIONS]\n" >&2

    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "root") root_command ;;
  esac
}

initialize
run "$@"
